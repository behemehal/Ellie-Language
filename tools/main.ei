/*


Class should be kept as type with length of data whom allocated for example:


class test {
    co(first_param, second_param);

    v first_param: int;
    v second_param: int;

    fn collect_params() : int {
        v collected = self.first_param + self.second_param;
        ret collected;
    }
}

This class has two parameters so it should be two. And its hash or name should be kept to

In stack it will be like this:

- first_param
1 = LDA #(null)[]
2 = STA

- second_param
3 = LDA #(null)[]
4 = STA

- collect_params function
5 = LDB $1
6 = LDC $2
7 = ADD
8 = RET

So when you construct a new object it will be like this:

v ntest = new test(1, 2);

9 = LDA #(int)[1, 0, 0, 0, 0, 0, 0, 0]
10 = STA
11 = LDA #(int)[2, 0, 0, 0, 0, 0, 0, 0]
12 = STA
13 = LDA #(test)[10, 12]

And calling collect_params will be like this:

ntest.collect_params();

14 = LDA $10
15 = STA $1
15 = LDB $12
16 = STA $2
17 = CALL $5

Accessing parameters will be like this:

v first = ntest.first_param;

18 = LDA $10
19 = STA $1




----

Allocating array

v test = [1,2, 3];

1 = LDA #(int)[1, 0, 0, 0, 0, 0, 0, 0]
2 = STA
3 = LDA #(int)[2, 0, 0, 0, 0, 0, 0, 0]
4 = STA
5 = LDA #(int)[3, 0, 0, 0, 0, 0, 0, 0]
6 = STA
7 = LDA #(array)[$1, $2, $3]
8 = STA

test[0] = 2;


9 = LDA #(int)[2, 0, 0, 0, 0, 0, 0, 0]
10 = STA
- Absolute index 
11 = STA $7, 0



*/


        //pub fn panic(s: string);

        /// Ellie Standard Library end
        /// This is not a legit import, but it is used to test the wasm



//class test {
//    co(first_param, second_param);
//
//    v first_param: int;
//    v second_param: int;
//
//    //fn collect_params() : int {
//    //    v collected = self.first_param + self.second_param;
//    //    ret collected;
//    //}
//}

@dont_fix_variant;
pub class bool {}
        
@dont_fix_variant;
pub class string {}

@dont_fix_variant;
pub class char {}

pub class TypeId {
    v id: int;
    v size: int;
}

pub class rawType {
    v typeId: TypeId;
    v data: [int];
}

@dont_fix_variant;
pub class array {
    co(data, length);
    v data: rawType;
    //0 if no limit has set
    v length: int;
}

@dont_fix_variant;
pub class cloak {
    co(data);
    v data: rawType;
}
        
@dont_fix_variant;
pub class int {}
        
@dont_fix_variant;
pub class float {}

@dont_fix_variant;
pub class double {}

@dont_fix_variant;
pub class void {}

@dont_fix_variant;
pub class null {}

@dont_fix_variant;
pub class function {}

@dont_fix_variant;
pub class nullAble<T> {}

@dont_fix_variant;
pub class object {}

@ellie_deep_cast=true;
c true : bool = 1 as bool;
@ellie_deep_cast=false;
c false : bool = 0 as bool;
pub fn println(s: string);

/*
fn factorial(x: int) : int {
    //0: LDA @X
    //1: STA
    //2: LDB #(int)[0, 0, 0, 0, 0, 0, 0, 0]
    //3: LDC $1
    //4: LDA $1, $2
     
    if x == 1 {
        ret 1;
    }
    v mul = factorial(x - 1);
    println("x: " + mul);
    ret x * mul;
}
*/

/*
fn test(f: int) : int {
    v testq = 222 + f;
    ret testq;
}
*/

//fn testFn(param1: int, param2: int, param3: int) {
//    v test = "param1:" + param1 + param2 + param3;
//    println("test: " + test);
//}

//fn render(param1: string, param2: int) {
//    v col = param1 + param2;
//    println("col: " + col);
//    if param2 != 20 {
//        render(param1, param2 - 1);
//        ret;
//    }
//}

//fn factorial(x: int) : int {
//    if x == 1 {
//        ret 1;
//    } else {
//        ret x * factorial(x - 1);
//    }
//}

class Example {
    co(first_param, second_param);

    v first_param: int;
    v second_param: int;
}

fn main() {

    v test = new Example(1, 2);
    println("test: " + test.first_param);

    //v ccloak = (1, 2, 3);
    //println("ccloak: " + (ccloak[0]!));
}

/*
  fn factorial(x: int) : int {
    if x == 1 {
        ret 1;
    }
    v mul = factorial(x - 1);
    println("x: " + mul);
    ret x * mul;

  }

  fn factorial(x: int) : int {
    if x != 1 {
        ret 1;
    }
    v mul = factorial(x - 1);
    println("x: " + mul);
    ret x * mul;

  }

fn main() {
  fn factorial(x: int) : int {
    if x != 1 {
        v mul = factorial(x - 1);
        println("x: " + mul);
        ret x * mul;
    }
    ret 1;
  }

  println("Result: " + factorial(10));
}
*/

/*
   println("Hello, world!");

    v loop_count = 0;

    v loop_go = true;

    fn loop_go_c() : bool {
        println("Checking loop_go: " + loop_go);
        ret loop_go;
    }

    loop loop_go_c() {
        loop_count += 1;
        println("inc: " + loop_count);
        if loop_count == 1 {
            loop_go = false;
        }
    }
    println("Loop count: " + loop_count);
*/

/*
fn main() {
    v lll = 98;
    v last = 0;
    v curr = 1;
    v loop_go = true;
    v loop_count = 0;

    c tet = 0;
    tet += 1;

    loop loop_go {
        v fib = last + curr;
        last = curr;
        curr = fib;
        loop_count += 1;
        if loop_count == 51 {
            loop_go = false;
            println("Fib: " + fib);
        }
    }
}
*/